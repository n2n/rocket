<?php

namespace rocket\spec\ei\component\field\impl\relation\option;

use n2n\dispatch\map\PropertyPath;
use n2n\ui\view\impl\html\HtmlView;
use rocket\spec\ei\manage\util\model\EntryManageUtils;
use n2n\util\ex\IllegalStateException;
use n2n\dispatch\mag\impl\model\MagAdapter;
use rocket\spec\ei\manage\EiSelection;
use n2n\reflection\CastUtils;
use n2n\reflection\ArgumentUtils;
use n2n\dispatch\property\impl\ObjectProperty;
use n2n\reflection\property\AccessProxy;
use n2n\dispatch\map\bind\BindingDefinition;

class ToManyMag extends MagAdapter {
	private $targetUtils;
	private $min;
	private $max;
	private $embeddedAddablesNum = 0;
	private $embeddedEditEnabled = false;
	private $embeddedUnsetAllowed = false;
	private $selectableTargetEiSelections;
	private $removeUnsusedEnabled = false;
	private $targetEiSelections = array();
	private $targetEntryManagers = array();
	
	public function __construct($propertyName, $label, EntryManageUtils $targetUtils, $min = null, $max = null) {
		parent::__construct($propertyName, $label, array());
		
		$this->targetUtils = $targetUtils;
		$this->min = $min; 
		$this->max = $max;
	}
	/* (non-PHPdoc)
	 * @see \n2n\dispatch\mag\Mag::applyValidation()
	 */
	public function setupBindingDefinition(BindingDefinition $bindingDefinition) {}
	
	public function createManagedProperty(AccessProxy $accessProxy): ManagedProperty {
		$propertyType = new ObjectProperty($accessProxy, false);
		return $propertyType;
	}
	
	public function setValue($targetEiSelections) {
		ArgumentUtils::valArray($targetEiSelections, 'rocket\spec\ei\manage\EiSelection');
		$this->targetEiSelections = $targetEiSelections;
	}
	
	public function getValue() {
		return $this->targetEiSelections;
	}
	
	public function setEmbeddedAddablesNum($embeddedAddablesNum) {
		$this->embeddedAddablesNum = (int) $embeddedAddablesNum;
	}
	
	public function getEmbeddedAddablesNum() {
		return $this->embeddedAddablesNum;
	}

	public function setEmbeddedEditEnabled($embeddedEditEnabled) {
		$this->embeddedEditEnabled = (boolean) $embeddedEditEnabled;
	}
	
	public function isEmbeddedEditEnabled() {
		return $this->embeddedEditEnabled;
	}
	
	public function setEmbeddedUnsetAllowed($embeddedUnsetAllowed) {
		$this->embeddedUnsetAllowed = (boolean) $embeddedUnsetAllowed;
	}
	
	public function isEmbeddedUnsetAllowed() {
		return $this->embeddedUnsetAllowed;
	}
	
// 	public function setRemoveUnusedEnabled($removeUnusedEnabled) {
// 		$this->removeUnsusedEnabled = $removeUnusedEnabled;
// 	}
	
// 	public function isRemoveUnusedEnabled() {
// 		return $this->removeUnsusedEnabled;
// 	}
	
	public function setSelectableTargetEiSelections(array $selectableTargetEiSelections = null) {
		$this->selectableTargetEiSelections = $selectableTargetEiSelections;
	}
	
	public function getSelectableEntities() {
		return $this->selectableTargetEiSelections;
	}
	
	private function createEntryIdOptions() {
		$targetEiState = $this->targetUtils->getEiState();
		$options = array();
		foreach ($this->selectableTargetEiSelections as $id => $targetEiSelection) {
			$options[$id] = $targetEiState->createIdentityString($targetEiSelection);
		}
		
		return $options;
	}

	public function getFormValue() {
		if ($this->embeddedEditEnabled && $this->selectableTargetEiSelections !== null) {
			throw new IllegalStateException('Embedded Edit and Entity Selection cannot both be enabled.');
		}
	
		$toManyForm = new ToManyForm($this->min, $this->max, $this->embeddedUnsetAllowed, $this->getLabel());
	
		$newEntryForms = array();
		for ($i = 0; $i < $this->embeddedAddablesNum; $i++) {
			$newEntryForms[] = $this->targetUtils->createNewEntryForm();
		}
		$toManyForm->setAvailableNewEntryForms($newEntryForms);

		foreach ($this->targetEiSelections as $targetEiSelection) {
			$targetEntryManager = $this->targetUtils->createEiSelectionMapping($targetEiSelection);
			$this->targetEntryManagers[$targetEiSelection->getId()] = $this->targetUtils->createEntryManager($targetEntryManager, false);
		}
	
		if ($this->embeddedEditEnabled) {
			$currentEntryForms = array();
			foreach ($this->targetEntryManagers as $id => $targetEntryManager) {
				$currentEntryForms[$id] = $this->targetUtils->createEntryFormFromMapping($targetEntryManager->getEiSelectionMapping());
			}
			
			$toManyForm->setCurrentEntryForms($currentEntryForms);
		} else if ($this->selectableTargetEiSelections !== null) {
			$toManyForm->setEntryIdOptions($this->createEntryIdOptions());
			$entryIdReps = array_keys($this->targetEntryManagers);
			
			$toManyForm->setEntryIdReps(array_combine($entryIdReps, $entryIdReps));
		}
		
		return $toManyForm;
	}

	public function setFormValue($toManyForm) {
		CastUtils::assertTrue($toManyForm instanceof ToManyForm);
		
		$this->targetEiSelections = array();
		
		foreach ($toManyForm->getNewEntryForms() as $newEntryForm) {
			$newTargetEiSelectionMapping = $newEntryForm->buildEiSelectionMapping();
			$entryManager = $this->targetUtils->createEntryManager();
			$entryManager->create($newTargetEiSelectionMapping);
					
// 			$this->eiSelectionMapping->registerRelatedMapping($this->mappingIdPath, $newTargetEiSelectionMapping);
			$this->targetEiSelectionMappings[] = $newTargetEiSelectionMapping;
			$this->targetEiSelections[] = $newTargetEiSelectionMapping->getEiSelection();
		}
		
		if ($this->embeddedEditEnabled) {
			$currentEntryForms = $toManyForm->getCurrentEntryForms();
			foreach ($this->targetEntryManagers as $idRep => $targetEntryManager) {
				if (!isset($currentEntryForms[$idRep])) {
					$this->remove($targetEntryManager->getEiSelectionMapping()->getEiSelection());
					continue;
				}
				
				$targetEiSelectionMapping = $currentEntryForms[$idRep]->buildEiSelectionMapping();
				$targetEntryManager->save($targetEiSelectionMapping);
				$this->targetEiSelectionMappings[] = $targetEiSelectionMapping;
				$this->targetEiSelections[] = $targetEiSelectionMapping->getEiSelection();	
			}
		} else if ($this->selectableTargetEiSelections !== null) {
			foreach ($toManyForm->getEntryIdReps() as $idRep) {
				$this->targetEiSelections[] = $this->selectableTargetEiSelections[$idRep];
			}
		}
	}
	

	private $unusedTargetEiSelections = array();
	private $targetEiSelectionMappings = array();
	
	private function remove(EiSelection $targetEiSelection) {
		$this->unusedTargetEiSelections[] = $targetEiSelection;
		
// 		if (!$this->removeUnsusedEnabled) return;
// 		// @todo this doesn't work yet
// 		$this->eiSelectionMapping->registerListener(new FlushMappingListener(
// 				function() use ($eiSelection) {
// 					$this->targetUtils->removeEiSelection($eiSelection);
// 				}), $this->mappingIdPath);
	}
	
	public function getUnusedTargetEiSelections() {
		return $this->unusedTargetEiSelections;
	}
	
	public function getTargetEiSelectionMappings() {
		return $this->targetEiSelectionMappings;
	}
	
	/* (non-PHPdoc)
	 * @see \n2n\dispatch\mag\Mag::createUiField()
	 */
	public function createUiField(PropertyPath $propertyPath, HtmlView $view): UiComponent {
		return $view->getImport('\rocket\spec\ei\component\field\impl\relation\view\toManyOption.html',
				array('propertyPath' => $propertyPath, 'targetEiState' => $this->targetUtils->getEiState()));
	}
}


<?php
/*
 * Copyright (c) 2012-2016, Hofmänner New Media.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of the n2n module ROCKET.
 *
 * ROCKET is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * ROCKET is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details: http://www.gnu.org/licenses/
 *
 * The following people participated in this project:
 *
 * Andreas von Burg...........:	Architect, Lead Developer, Concept
 * Bert Hofmänner.............: Idea, Frontend UI, Design, Marketing, Concept
 * Thomas Günther.............: Developer, Frontend UI, Rocket Capability for Hangar
 */
namespace rocket\impl\ei\component\prop\bool;

use n2n\impl\persistence\orm\property\BoolEntityProperty;
use n2n\impl\persistence\orm\property\ScalarEntityProperty;
use n2n\persistence\orm\criteria\item\CrIt;
use n2n\persistence\orm\property\EntityProperty;
use n2n\reflection\property\AccessProxy;
use n2n\util\type\ArgUtils;
use n2n\util\type\TypeConstraint;


 
use rocket\op\ei\manage\critmod\filter\FilterProp;
use rocket\op\ei\manage\critmod\sort\SortProp;
use rocket\op\ei\manage\critmod\sort\impl\SimpleSortProp;
use rocket\op\ei\manage\entry\EiFieldNature;

use rocket\op\ei\util\Eiu;
use rocket\op\ei\util\filter\prop\BoolFilterProp;
use rocket\impl\ei\component\prop\adapter\DraftablePropertyEiPropNatureAdapter;
use rocket\si\content\impl\SiFields;
use rocket\si\content\SiField;
use rocket\impl\ei\component\prop\bool\conf\BooleanConfig;
use rocket\op\ei\util\factory\EifGuiField;
use rocket\si\content\impl\meta\SiCrumb;
use rocket\si\control\SiIconType;
use rocket\op\ei\manage\security\filter\SecurityFilterProp;
use rocket\impl\ei\component\prop\meta\AddonEiPropNature;
use rocket\impl\ei\component\prop\meta\AddonAdapter;
use rocket\op\ei\manage\DefPropPath;
use n2n\reflection\property\PropertyAccessProxy;
use n2n\util\type\TypeConstraints;
use rocket\op\ei\util\factory\EifField;

class BooleanEiPropNature extends DraftablePropertyEiPropNatureAdapter implements AddonEiPropNature {
	use AddonAdapter;

	function __construct(PropertyAccessProxy $propertyAccessProxy) {
		parent::__construct($propertyAccessProxy->createRestricted(TypeConstraints::bool(true)));
	}

	function setup(Eiu $eiu): void {
		parent::setup($eiu); // TODO: Change the autogenerated stub
	}

	private function mapAssociations(Eiu $eiu) {
		$activeDefPropPaths = array();
		$notactiveDefPropPaths = array();

		if ($eiu->field()->getValue()) {
			$activeDefPropPaths = $this->getOnAssociatedDefPropPaths();
			$notactiveDefPropPaths = $this->getOffAssociatedDefPropPaths();
		} else {
			$activeDefPropPaths = $this->getOffAssociatedDefPropPaths();
			$notactiveDefPropPaths = $this->getOnAssociatedDefPropPaths();
		}

		foreach ($notactiveDefPropPaths as $eiPropPath) {
			if (null !== ($eiFieldWrapper = $eiu->entry()->getEiFieldAbstraction($eiPropPath))) {
				$eiFieldWrapper->setIgnored(true);
			}
		}

		foreach ($activeDefPropPaths as $eiPropPath) {
			if (null !== ($eiFieldWrapper = $eiu->entry()->getEiFieldAbstraction($eiPropPath))) {
				$eiFieldWrapper->setIgnored(false);
			}
		}
	}

	protected function buildReadableEifField(Eiu $eiu): ?EifField {
		$eiu->entry()->onValidate(function () use ($eiu) {
			$this->mapAssociations($eiu);
		});

		return $eiu->f()->newField(TypeConstraints::bool(false),
				function () use ($eiu) {
					return (bool) $eiu->prop()->readNativeValue();
				});
	}

	protected function buildEiFieldValidators(Eiu $eiu): array {
		return [];
	}

	private array $onAssociatedDefPropPaths = array();
	private array $offAssociatedDefPropPaths = array();

	/**
	 * @param DefPropPath[] $onAssociatedDefPropPaths
	 */
	public function setOnAssociatedDefPropPaths(array $onAssociatedDefPropPaths) {
		ArgUtils::valArray($onAssociatedDefPropPaths, DefPropPath::class);
		$this->onAssociatedDefPropPaths = $onAssociatedDefPropPaths;
	}

	/**
	 * @return DefPropPath[]
	 */
	public function getOnAssociatedDefPropPaths(): array {
		return $this->onAssociatedDefPropPaths;
	}

	/**
	 * @param DefPropPath[] $offAssociatedDefPropPaths
	 */
	public function setOffAssociatedDefPropPaths(array $offAssociatedDefPropPaths) {
		ArgUtils::valArray($offAssociatedDefPropPaths, DefPropPath::class);
		$this->offAssociatedDefPropPaths = $offAssociatedDefPropPaths;

	}

	/**
	 * @return DefPropPath[]
	 */
	public function getOffAssociatedDefPropPaths(): array {
		return $this->offAssociatedDefPropPaths;
	}
	
	/**
	 * {@inheritDoc}
	 * @see \rocket\impl\ei\component\prop\adapter\PropertyEiPropNatureAdapter::setEntityProperty()
	 */
	function setEntityProperty(?EntityProperty $entityProperty): void {
		ArgUtils::assertTrue($entityProperty instanceof BoolEntityProperty 
				|| $entityProperty instanceof ScalarEntityProperty || $entityProperty === null);
		
		$this->entityProperty = $entityProperty;
	}

	function createOutEifGuiField(Eiu $eiu): EifGuiField  {
		$value = $eiu->field()->getValue();
		if ($value) {
			$siField = SiFields::crumbOut(SiCrumb::createIcon(SiIconType::ICON_CHECK));
		} else {
			$siField = SiFields::crumbOut(SiCrumb::createIcon(SiIconType::ICON_TIMES));
		}
		return $eiu->factory()->newGuiField($siField->setMessagesCallback(fn () => $eiu->field()->getMessagesAsStrs()));
	}
	
	function createInEifGuiField(Eiu $eiu): EifGuiField {
		$mapCb = function ($defPropPath) { return (string) $defPropPath; };

		$siField = SiFields::boolIn((bool) $eiu->field()->getValue())
				->setMandatory($this->isMandatory())
				->setOnAssociatedPropIds(array_map($mapCb, $this->getOnAssociatedDefPropPaths()))
				->setOffAssociatedPropIds(array_map($mapCb, $this->getOffAssociatedDefPropPaths()))
				->setMessagesCallback(fn () => $eiu->field()->getMessagesAsStrs());
		
		return $eiu->factory()->newGuiField($siField)
				->setSaver(function () use ($siField, $eiu) {
					$eiu->field()->setValue($siField->getValue());
				});
	}

	function buildFilterProp(Eiu $eiu): ?FilterProp {
		return $this->buildSecurityFilterProp($eiu);
	}

	function buildSecurityFilterProp(Eiu $eiu): ?SecurityFilterProp {
		if (null !== ($entityProperty = $this->getEntityProperty())) {
			return new BoolFilterProp(CrIt::p($entityProperty), $this->getLabelLstr());
		}
		
		return null;
	}

	function buildSortProp(Eiu $eiu): ?SortProp {
		if (null !== ($entityProperty = $this->getEntityProperty())) {
			return new SimpleSortProp(CrIt::p($entityProperty), $this->getLabelLstr());
		}
		
		return null;
	}
}
